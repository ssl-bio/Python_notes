#+Title: Exercises chapter 3: Introducing Lists
#+Author: Saul SL
#+date: June 2023
#+options: broken-links:t ^:{} toc:nil
#+SETUPFILE: ../latex_conf.org

* Exercise 3-1 Names
Store the names of a few of your friends in a list called names. Print each person’s name by accessing each element in the list, one at a time.
#+begin_src python -i
names = ['tim', 'tom', 'sam']
for i in names:
    print(i.title())
#+end_src

* Exercise 3-2 Greetings
Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print a message to them. The text of each mes- sage should be the same, but each message should be personalized with the person’s name.
#+begin_src python -i
names = ['tim', 'tom', 'sam']
  for name in names:
      print(f"Hello {name.title()}, welcome back!")
#+end_src

* Exercise 3-3 Your Own List
Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as “I would like to own a Honda motorcycle.”
#+begin_src python -i
transportation_modes = ['bicycle', 'train', 'bus']
print(f"I rarely move by {transportation_modes[0]}")
print(f"I used to ride the {transportation_modes[1]} a lot")
print(f"Nowadays I mainly use the {transportation_modes[2]}")
#+end_src

* Exercise 3-4 Guest list
If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you’d like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner.
#+begin_src python -i
guests = ['linus', 'tim', 'tom']
for guest in guests:
    print(f"Dear {guest.title()}, I would like to invite you to have dinner")
#+end_src

* Exercise 3-5 Changing Guest List
You just heard that one of your guests can’t make the dinner, so you need to send out a new set of invitations. You’ll have to think of someone else to invite.
- Start with your program from Exercise 3-4. Add a print() call at the end of your program stating the name of the guest who can’t make it.
- Modify your list, replacing the name of the guest who can’t make it with the name of the new person you are inviting.
- Print a second set of invitation messages, one for each person who is still in your list.
#+begin_src python -i
guests = ['linus', 'tim', 'tom']
for guest in guests:
    print(f"Dear {guest.title()}, I would like to invite you to have dinner")

print(f"Unfortunatelly, {guests[0].title()} won't come for dinner")
# guests.replace('linus', 'steve') # Invalid
guests.remove('linus')
guests.append('steve')
print(f"Dear {guests[len(guests)-1].title()},\
I would like to invite you to have dinner")
#+end_src

* Exercise 3-6 More Guests
You just found a bigger dinner table, so now more space is
available. Think of three more guests to invite to dinner.
- Start with your program from Exercise 3-4 or Exercise 3-5. Add a print() call to the end of your program informing people that you found a bigger dinner table.
- Use insert() to add one new guest to the beginning of your list.
- Use insert() to add one new guest to the middle of your list.
- Use append() to add one new guest to the end of your list.
- Print a new set of invitation messages, one for each person in your list.
#+begin_src python -i
guests = ['linus', 'tim', 'tom']
for guest in guests:
    print(f"Dear {guest.title()}, I would like to invite you to have dinner")

print("We found a bigger place to host the dinner")
guests.insert(0, "tina")
guests.insert(2, "anna")
guests.insert(len(guests), "maya")
for guest in guests:
    print(f"Dear {guest.title()}, I would like to invite you to have dinner")
#+end_src

* Exercise 3-7  Shrinking Guest List
You just found out that your new dinner table won’t arrive in time for the dinner, and you have space for only two guests.

- Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. 
- Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you’re sorry you can’t invite them to dinner. 
- Print a message to each of the two people still on your list, letting them know they’re still invited. 
- Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program.
#+begin_src python -i
guests = ['linus', 'tim', 'tom']
for guest in guests:
    print(f"Dear {guest.title()}, I would like to invite you to have dinner")

print("We found a bigger place to host the dinner")
guests.insert(0, "tina")
guests.insert(2, "anna")
guests.insert(len(guests), "maya")
for guest in guests:
    print(f"Dear {guest.title()}, I would like to invite you to have dinner")

print("Change of plans, now only two people can come to dinner")
while len(guests) > 2:
    out_guest = guests.pop()
    print(f"Sorry we can't have you, {out_guest.title()}")

for guest in guests:
    print(f"Dear {guest.title()}, please come to dinner")

# guest_n = len(guests)
while guests:
    del guests[0]

print(guests)
#+end_src

* Exercise 3-8 Seeing the World
Think of at least five places in the world you’d like to
visit.

- Store the locations in a list. Make sure the list is not in alphabetical order. 
- Print your list in its original order. Don’t worry about printing the list neatly, just print it as a raw Python list. 
- Use sorted() to print your list in alphabetical order without modifying the actual list. 
- Show that your list is still in its original order by printing it. 
- Use sorted() to print your list in reverse alphabetical order without chang- ing the order of the original list. 
- Show that your list is still in its original order by printing it again. 
- Use reverse() to change the order of your list. Print the list to show that its order has changed. 
- Use reverse() to change the order of your list again. Print the list to show it’s back to its original order. 
- Use sort() to change your list so it’s stored in alphabetical order. Print the list to show that its order has been changed. 
- Use sort() to change your list so it’s stored in reverse alphabetical order. Print the list to show that its order has changed.
#+begin_src python -i
itravel = ['thailand', 'colombia', 'chile', 'tanzania', 'madagascar']
for place in itravel:
    print(f"- {place.title()}")

# sorted without modification
for place in sorted(itravel):
    print(f"- {place.title()}")

for place in itravel:
    print(f"- {place.title()}")

# reverse sorted without modification
for place in sorted(itravel, reverse=True):
    print(f"- {place.title()}")

for place in itravel:
    print(f"- {place.title()}")

# Reverse list
itravel.reverse()
for place in itravel:
    print(f"- {place.title()}")

# Re-reverse list
itravel.reverse()
for place in itravel:
    print(f"- {place.title()}")

# Sort list
itravel.sort()
for place in itravel:
    print(f"- {place.title()}")

# Sort in reverse order
itravel.sort(reverse=True)
for place in itravel:
    print(f"- {place.title()}")
#+end_src

* Exercise 3-9 Dinner Guests
Working with one of the programs from Exercises 3-4 through 3-7 (page 42), use len() to print a message indicating the number of people you are inviting to dinner.
#+begin_src python -i
guests = ['linus', 'tim', 'tom']
for guest in guests:
    print(f"Dear {guest.title()}, I would like to invite you to have dinner")

print("We found a bigger place to host the dinner")
guests.insert(0, "tina")
guests.insert(2, "anna")
guests.insert(len(guests), "maya")

print(f"There will be {len(guests)} people at the dinner")
#+end_src

* Exercise 3-10 Every Function
Think of something you could store in a list. For example, you could make a list of mountains, rivers, countries, cities, languages, or any- thing else you’d like. Write a program that creates a list containing these items and then uses each function introduced in this chapter at least once.

#+begin_src python -i
languages = ['spanish', 'chinese', 'english', 'korean', 'swahili']

# length of a list
print(f"The list has {len(languages)} elements")
print(f"The first item is: {languages[0].title()}")
languages[0] = 'quechua'
print(f"Now the first element is: {languages[0].title()}")
languages.append('aymara')
languages.insert(0, 'guarani')
print(f"Now the first element is: {languages[0].title()}")
print(f"And the last is: {languages[-1].title()}")

# Removing elements
print(languages)
print("I will now remove the 4th, the 1st and last elements")
del languages[3]
languages.pop()
languages.pop(0)
print(languages)

# sort
print(sorted(languages))
languages.sort(reverse=True)
print(languages)
#+end_src
